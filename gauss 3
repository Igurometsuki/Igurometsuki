#EXPERIMENT - 1
def f(x):
    return x**3 - 4*x - 9

a = float(input("Enter the value of a="))
b = float(input("Enter the value of b="))
if f(a) * f(b) > 0.0:
    print(f"The root of f(x) does not lie in the interval [{a},{b}]")
else:
    print(f"The root of f(x) lies in the interval [{a},{b}]")
    n = int(input("Enter the number of iterations="))
    for i in range(n + 1):
        x = (a + b) / 2
        print("Iteration:%d,\t x=%0.6f \t f(x)=%0.6f" % (i, x, f(x)))
        if f(a) * f(x) < 0:
            b = x
        else:
            a = x
    print(f"The approximate root is {x}")






#NEWTON METHOD
#EXPERIMENT - 3
from sympy import *
def f(x):
    return 3*x - cos(x) - 1
def df(x):
    return 3 + sin(x)

a = float(input("Enter the value of a="))
b = float(input("Enter the value of b="))
if f(a) * f(b) > 0.0:
    print("The root of f(x) does not lie in the interval [{a},{b}]")
else:
    print("The root of f(x) lies in the interval [{a},{b}]")
    n = int(input("Enter the number of iterations="))
    x0 = (a + b) / 2
    for i in range(n + 1):
        xn = x0 - f(x0) / df(x0)
        print("Iteration:%d,\t x=%0.6f \t f(x)=%0.6f" % (i, xn, f(xn)))
        x0 = xn
    print(f"The approximate root is {xn}")




# GAUSS ELIMINATION
import numpy as np
A = np.array([[10, 2, 1], 
              [1, 10, -1], 
              [-2, 3, 10]], dtype=float)
B = np.array([9, -22, 22], dtype=float)
n = len(B)

for pivot in range(n-1):
    for row in range(pivot+1,n):
        m = A[row,pivot] / A[pivot,pivot]
        A[row, pivot:] -= m*A[pivot,pivot:]
        B[row] -= m*b[pivot]
x = np.zeros(n)
for i in reversed(range(n)):
    x[i] = (b[i]-np.dot(A[i,i+1:],x[i+1:]))/A[i,i]
print('Solution:',x)











#TRAPEZOIDAL
#Experiment-7
x0 = int(input('Enter the lower limit value:'))
xn = int(input('Enter the upper limit value:'))
n = int(input('Enter the number of sub divisions:'))
def f(x):
    return (1/(1+x**2))
h = (xn-x0)/n
sum1 = f(x0) + f(xn)
for i in range(1,n):
    sum1 = sum1 + 2*f(x0+i*h)
print('Estimated value of integration is:',h/2*sum1)











#WEDDLES
#Experiment-8
x0 = int(input('Enter the lower limit value:'))
xn = int(input('Enter the upper limit value:'))
n = int(input('Enter the number of sub divisions:'))
def f(x):
    return (1/(1+x**2))
h = (xn-x0)/n
sum1 = f(x0) + f(xn)
for i in range(1,n,6):
    sum1 = sum1 + (5*f(x0+i*h)) + f(x0+(i+1)*h) + 6*f(x0+(i+2)*h) + f(x0+(i+3)*h) + 5*f(x0+(i+4)*h)
print('Estimated value of the integration is:', 3*h/10 * sum1)








#SIMPSONS ONE THIRD RULE
#EXPERIMENT-9
x0 = int(input("Lower limit of the interval:"))
xn = int(input("Upper limit of the interval:"))
n = int(input("Number of subintervals:"))
def f(x):
    return (1 / (1 + x**2))
h = (xn - x0) / n
sum1 = f(x0) + f(xn)
for i in range(1, n):
    if i % 2 == 0:
        sum1 = sum1 + 2 * f(x0 + i * h)
    else:
        sum1 = sum1 + 4 * f(x0 + i * h)
print("Estimated value of given integration:", h / 3 * sum1)









